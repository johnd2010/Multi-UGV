<?xml version="1.0"?>
<!-- This URDF should be loaded into a ROS parameter using xacro, then loaded 
     into Gazebo using robot state publisher.
     Requires the arguments: $namespace, $id -->
<robot name="jackal" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <xacro:property name="PI"                        value="3.1415926535897931" />
  <xacro:property name="wheelbase"                 value="0.262" />
  <xacro:property name="track"                     value="0.37559" />
  <xacro:property name="wheel_vertical_offset"     value="0.0345" />
  <xacro:property name="footprint_vertical_offset" value="-0.0655" />
  <xacro:property name="wheel_radius"              value="0.098" />
  <xacro:property name="wheel_width"               value="0.040" />
  <xacro:property name="chassis_length"            value="0.420" />
  <xacro:property name="chassis_width"             value="0.310" />
  <xacro:property name="chassis_height"            value="0.184" />
  <xacro:property name="dummy_inertia"             value="1e-09"/>
  <xacro:property name="mount_spacing"             value="0.120" />
 
  <material name="dark_grey"><color rgba=" 0.2 0.2 0.2 1.0" /></material>
  <material name="light_grey"><color rgba="0.4 0.4 0.4 1.0" /></material>
  <material name="yellow"><color rgba="0.8 0.8 0.0 1.0" /></material>
  <material name="black"><color rgba="0.15 0.15 0.15 1.0" /></material>

  <!-- The wheel template. -->
  <xacro:macro name="wheel" params="prefix *joint_pose">
    <link name="${prefix}_wheel_link">
      <visual>
        <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
        <geometry>
          <mesh filename="package://multi_jackal_description/meshes/jackal-wheel.stl"/>
        </geometry>
        <material name="black" />
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="0.477"/>
        <inertia
          ixx="0.0013" ixy="0" ixz="0"
          iyy="0.0024" iyz="0"
          izz="0.0013"/>
      </inertial>
    </link>
    <gazebo reference="${prefix}_wheel_link">
      <material>Gazebo/DarkGrey</material>
    </gazebo>
    <joint name="${prefix}_wheel" type="continuous">
      <parent link="chassis_link"/>
      <child link="${prefix}_wheel_link" />
      <xacro:insert_block name="joint_pose" />
      <axis xyz="0 1 0" />
    </joint>
    <!-- In reality, Jackal has only two motors, one per side. However, it's more
         straightforward for Gazebo to simulate as if there's an actuator per wheel. -->
    <transmission name="${prefix}_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${prefix}_wheel">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
      <actuator name="${prefix}_actuator">
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:macro>

  <!-- The joints and links. -->
  <xacro:wheel prefix="front_left">
    <origin xyz="${wheelbase/2} ${track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:wheel>
  <xacro:wheel prefix="front_right">
    <origin xyz="${wheelbase/2} ${-track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:wheel>
  <xacro:wheel prefix="rear_left">
    <origin xyz="${-wheelbase/2} ${track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:wheel>
  <xacro:wheel prefix="rear_right">
    <origin xyz="${-wheelbase/2} ${-track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:wheel>

  <link name="base_link"></link>

  <joint name="base_link_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <parent link="base_link"/>
    <child link="chassis_link" />
  </joint>

  <!-- Arch -->
  <link name="arch"/>
  <joint name="top_plate_link_to_arch" type="fixed">
    <parent link="base_link" />
    <child link="arch" />
    <origin xyz="0 0 0" rpy="0 0 0" />
  </joint>

  <link name="chassis_link">
    <visual>
      <origin xyz="0 0 ${footprint_vertical_offset}" rpy="${PI/2} 0 ${PI/2}"/>
      <geometry>
        <mesh filename="package://multi_jackal_description/meshes/jackal-base.stl"/>
      </geometry>
      <material name="dark_grey" />
    </visual>
    <collision>
      <origin xyz="0 0 ${chassis_height/2}"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </collision>
    <inertial>
      <!-- Center of mass -->
      <origin xyz="0.012  0.002 0.067" rpy="0 0 0"/>
      <mass value="16.523"/>
      <!-- Moments of inertia: ( chassis without wheels ) -->
      <inertia
        ixx="0.3136" ixy="-0.0008" ixz="0.0164"
        iyy="0.3922" iyz="-0.0009"
        izz="0.4485"/>
      </inertial>
  </link>

  <link name="fenders_link">
    <visual>
      <origin xyz="0 0 ${footprint_vertical_offset}" rpy="${PI/2} 0 ${PI/2}"/>
      <geometry>
        <mesh filename="package://multi_jackal_description/meshes/jackal-fenders.stl"/>
      </geometry>
      <material name="yellow" />
    </visual>
  </link>
  <joint name="fenders_joint" type="fixed">
    <parent link="chassis_link" />
    <child link="fenders_link" />
  </joint>

  <!-- TODO: Make this internal_imu_link or something, and use a mixed-in xacro
       to supply the joint between it and imu_link. This is important so that imu_link
       always points to the "active" IMU. When an upgrade IMU is connected, the
       internal_imu_link should remain, but imu_link should point to the upgrade one. -->
  <link name="imu_link">
    <inertial>
      <mass value="0.001"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="${dummy_inertia}" ixy="0.0" ixz="0.0" iyy="${dummy_inertia}" iyz="0.0" izz="${dummy_inertia}"/>
    </inertial>
  </link>

  <link name="vn100"/>
  <joint name="imu_link_to_vn100" type="fixed">
    <parent link="imu_link" />
    <child link="vn100" />
    <origin xyz="0 0 0" rpy="0 0 0" />
  </joint>

  <joint name="imu_joint" type="fixed">
    <parent link="chassis_link" />
    <child link="imu_link" />
  </joint>

  <!-- TODO: Same note as applies to imu_link -->
  <link name="navsat_link">
    <visual>
      <geometry>
        <cylinder radius="0.026" length="0.016" />
      </geometry>
      <origin xyz="0 0 0.008" />
      <material name="black" />
    </visual>
  </link>
  <joint name="navsat_joint" type="fixed">
    <parent link="chassis_link" />
    <child link="navsat_link" />
    <origin xyz="-0.180 0.126 0.1815" />
  </joint>

  <!-- GT LINKS -->
  <link name="gt_link">
    <visual>
      <geometry>
        <cylinder radius="0.026" length="0.016" />
      </geometry>
      <origin xyz="0 0 0.008" />
      <material name="black" />
    </visual>
  </link>
  <joint name="gt_joint" type="fixed">
    <parent link="chassis_link" />
    <child link="gt_link" />
    <origin xyz="-0.180 0.126 0.1815" />
  </joint>

  <link name="gt_local_link"/>
  <joint name="gt_local_joint" type="fixed">
    <parent link="base_link" />
    <child link="gt_local_link" />
    <origin xyz="88.5140168345 5.2268350293 0.1" rpy="0 0 -1.528641" />
    <!-- <origin xyz="0 0 0" rpy="0.0 0.0 -0.0"/> -->
  </joint>
  <!-- ...... -->

  <link name="mid_mount"></link>
  <joint name="mid_mount_joint" type="fixed">
    <parent link="chassis_link" />
    <child link="mid_mount" />
    <origin xyz="0 0 ${chassis_height}" />
  </joint>

  <link name="rear_mount"></link>
  <joint name="rear_mount_joint" type="fixed">
    <parent link="mid_mount" />
    <child link="rear_mount" />
    <origin xyz="${-mount_spacing} 0 0" />
  </joint>

  <link name="side_mount"></link>
  <joint name="side_mount_joint" type="fixed">
    <parent link="mid_mount" />
    <child link="side_mount" />
    <origin xyz="0 ${-mount_spacing} 0" />
  </joint>

  <link name="front_mount"></link>
  <joint name="front_mount_joint" type="fixed">
    <parent link="mid_mount" />
    <child link="front_mount" />
    <origin xyz="${mount_spacing} 0 0" />
  </joint>

  <!-- <link name="gps_mount">
    <pose>0 0 1 0 0 0</pose>
    <sensor name="gps_sensor" type="gps">
      <plugin name="gps_plugin" filename="libgazebo_gps_plugin.so">
        <update_rate>10</update_rate>
        <gpsNoise>false</gpsNoise>
        <topic>gps/new</topic>
      </plugin>
    </sensor>
  </link>
  <joint name="gps_mount_joint" type="fixed">
    <parent link="mid_mount" />
    <child link="gps_mount" />
    <origin xyz="${mount_spacing} 0 0" />
  </joint> -->
  
  <!-- Bring in simulation data for Gazebo. -->
  <xacro:include filename="jackal.gazebo"/>

  <!-- Optional standard accessories, as supplied by Clearpath.-->
  <xacro:include filename="base_accessories.urdf.xacro" />
  
  <!-- Optional custom accessories. -->
  <xacro:include filename="custom_accessories.urdf.xacro" />


<link name="front_realsense" />

  <!--
    The gazebo plugin aligns the depth data with the Z axis, with X=left and Y=up
    ROS expects the depth data along the X axis, with Y=left and Z=up
    This link only exists to give the gazebo plugin the correctly-oriented frame
  -->
  <link name="front_realsense_gazebo" />
  <joint name="front_realsense_gazebo_joint" type="fixed">
    <parent link="front_realsense"/>
    <child link="front_realsense_gazebo"/>
    <origin xyz="0.0 0 0" rpy="-1.5707963267948966 0 -1.5707963267948966"/>
  </joint>

  <gazebo reference="front_realsense">
    <turnGravityOff>true</turnGravityOff>
    <sensor type="depth" name="front_realsense_depth">
      <update_rate>30</update_rate>
      <camera>
        <!-- 75x65 degree FOV for the depth sensor -->
        <horizontal_fov>1.5184351666666667</horizontal_fov>
        <vertical_fov>1.0122901111111111</vertical_fov>

        <image>
          <width>1280</width>
          <height>720</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <!-- give the color sensor a maximum range of 50m so that the simulation renders nicely -->
          <near>0.01</near>
          <far>50.0</far>
        </clip>
      </camera>
      <plugin name="kinect_controller" filename="libgazebo_ros_openni_kinect.so">
        <baseline>0.2</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>30</updateRate>
        <cameraName>realsense</cameraName>
        <imageTopicName>color/image_raw</imageTopicName>
        <cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
        <depthImageTopicName>depth/image_rect_raw</depthImageTopicName>
        <depthImageInfoTopicName>depth/camera_info</depthImageInfoTopicName>
        <pointCloudTopicName>depth/color/points</pointCloudTopicName>
        <frameName>$(arg namespace)/front_realsense_gazebo</frameName>
        <pointCloudCutoff>0.105</pointCloudCutoff>
        <pointCloudCutoffMax>8.0</pointCloudCutoffMax>
        <!-- <distortionK1>0.00000001</distortionK1> -->
        <!-- <distortionK2>0.00000001</distortionK2> -->
        <!-- <distortionK3>0.00000001</distortionK3> -->
        <!-- <distortionT1>0.00000001</distortionT1> -->
        <!-- <distortionT2>0.00000001</distortionT2> -->
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>

  <link name="front_realsense_lens">
    <visual>
      <origin xyz="0.02 0 0" rpy="${pi/2} 0 ${pi/2}" />
      <geometry>
        <mesh filename="package://realsense2_description/meshes/d435.dae" />
      </geometry>
      <material name="white" />
    </visual>
  </link>

  <joint type="fixed" name="front_realsense_lens_joint">
    <!-- Offset the camera 5cm forwards and 1cm up -->
    <origin xyz="0.05 0 0.01" rpy="0 0 0" />
    <parent link="front_mount" />
    <child link="front_realsense_lens" />
  </joint>
  <joint type="fixed" name="front_realsense_joint">
    <origin xyz="0.025 0 0" rpy="0 0 0" />
    <parent link="front_realsense_lens" />
    <child link="front_realsense" />
  </joint>
<link name="side_realsense" />

  <!--
    The gazebo plugin aligns the depth data with the Z axis, with X=left and Y=up
    ROS expects the depth data along the X axis, with Y=left and Z=up
    This link only exists to give the gazebo plugin the correctly-oriented frame
  -->
  <link name="side_realsense_gazebo" />
  <joint name="side_realsense_gazebo_joint" type="fixed">
    <parent link="side_realsense"/>
    <child link="side_realsense_gazebo"/>
    <origin xyz="0.0 0 0.05" rpy="-1.5707963267948966 0 -1.5707963267948966"/>
  </joint>

  <gazebo reference="side_realsense">
    <turnGravityOff>true</turnGravityOff>
    <sensor type="depth" name="side_realsense_depth">
      <update_rate>30</update_rate>
      <camera>
        <!-- 75x65 degree FOV for the depth sensor -->
        <horizontal_fov>1.5184351666666667</horizontal_fov>
        <vertical_fov>1.0122901111111111</vertical_fov>

        <image>
          <width>1280</width>
          <height>720</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <!-- give the color sensor a maximum range of 50m so that the simulation renders nicely -->
          <near>0.01</near>
          <far>50.0</far>
        </clip>
      </camera>
      <plugin name="kinect_controller" filename="libgazebo_ros_openni_kinect.so">
        <baseline>0.2</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>30</updateRate>
        <cameraName>side_realsense</cameraName>
        <imageTopicName>color/image_raw</imageTopicName>
        <cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
        <depthImageTopicName>depth/image_rect_raw</depthImageTopicName>
        <depthImageInfoTopicName>depth/camera_info</depthImageInfoTopicName>
        <pointCloudTopicName>depth/color/points</pointCloudTopicName>
        <frameName>$(arg namespace)/side_realsense_gazebo</frameName>
        <pointCloudCutoff>0.105</pointCloudCutoff>
        <pointCloudCutoffMax>8.0</pointCloudCutoffMax>
        <!-- <distortionK1>0.00000001</distortionK1> -->
        <!-- <distortionK2>0.00000001</distortionK2> -->
        <!-- <distortionK3>0.00000001</distortionK3> -->
        <!-- <distortionT1>0.00000001</distortionT1> -->
        <!-- <distortionT2>0.00000001</distortionT2> -->
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>

  <link name="side_realsense_lens">
    <visual>
      <origin xyz="0.02 0 0" rpy="${pi/2} 0 -${pi/2}" />
      <geometry>
        <mesh filename="package://realsense2_description/meshes/d435.dae" />
      </geometry>
      <material name="white" />
    </visual>
  </link>

  <joint type="fixed" name="side_realsense_lens_joint">
    <!-- Offset the camera 5cm forwards and 1cm up -->
    <origin xyz="0.05 0 0.01" rpy="0 0 0" />
    <parent link="side_mount" />
    <child link="side_realsense_lens" />
  </joint>
  <joint type="fixed" name="side_realsense_joint">
    <origin xyz="0.025 0 0" rpy="0 0 0" />
    <parent link="side_realsense_lens" />
    <child link="side_realsense" />
  </joint>
</robot>
